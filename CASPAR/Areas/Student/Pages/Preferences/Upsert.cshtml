@page
@model CASPAR.Areas.Students.Pages.Preferences.UpsertModel
@{
	ViewData["Title"] = "Preferences";
}
<div class="row">
	<!-- Name of current dashboard-->
	<h4>Preferences</h4>
</div>

<!-- Create a new card-->
<div class="row">
	<div class="col-12 mb-3">
		<div class="card shadow">
			<div class="card-body py-5">
				<form method="post" id="selectPreference" onsubmit="return validateForm()">
					<div class="row">
						<div class="col-6">
							<!-- Course Prefix -->
							<label asp-for="@Model.StudentPreferenceAddVM.Course.ProgramPrefix">Course Prefix</label>
							<div class="input-group flex-nowrap pb-2">
								@*						<span class="input-group-text bg-primary">
								<i class="bi bi-ticket-perforated text-white"></i>
								</span>*@
								<input type="text" asp-for="@Model.StudentPreferenceAddVM.Course.ProgramPrefix" class="form-control" disabled>
							</div>
						</div>
						<div class="col-6">
							<!-- Course Numnber -->
							<label asp-for="@Model.StudentPreferenceAddVM.Course.CourseNumber">Course Number</label>
							<div class="input-group flex-nowrap pb-2">
								@*						<span class="input-group-text bg-primary">
								<i class="bi bi-ticket-perforated text-white"></i>
								</span>*@
								<input type="text" asp-for="@Model.StudentPreferenceAddVM.Course.CourseNumber" class="form-control" disabled>
							</div>
						</div>
					</div>

					<!-- Course Name -->
					<label asp-for="@Model.StudentPreferenceAddVM.Course.CourseName">Course Name</label>
					<div class="input-group flex-nowrap pb-2">
						@*						<span class="input-group-text bg-primary">
						<i class="bi bi-ticket-perforated text-white"></i>
						</span>*@
						<input type="text" asp-for="@Model.StudentPreferenceAddVM.Course.CourseName" class="form-control" disabled>
					</div>

					<!-- Semster Name and Year-->
					<label asp-for="@Model.StudentPreferenceAddVM.SemesterNameAndYear">Semester</label>
					<div class="input-group flex-nowrap pb-2">
						@*						<span class="input-group-text bg-primary">
						<i class="bi bi-ticket-perforated text-white"></i>
						</span>*@
						<input type="text" asp-for="@Model.StudentPreferenceAddVM.SemesterNameAndYear" class="form-control" value="@Model.StudentPreferenceAddVM.Semester.SemesterName @Model.StudentPreferenceAddVM.Semester.SemesterYear" disabled>
					</div>

					<!-- Modality -->
					<label asp-for="@Model.StudentPreferenceAddVM.Preference.ModalityID">Modality</label>
					<div class="input-group flex-nowrap pb-2">
						@*						<span class="input-group-text bg-primary">
						<i class="bi bi-ticket-perforated text-white"></i>
						</span>*@
						<select asp-for="@Model.StudentPreferenceAddVM.Preference.ModalityID" class="form-select" onchange="changeRequirementsForModality()" required>
							<option value="" disabled selected>--Select Modality--</option>
							@foreach (Modality type in Model.Modalities)
							{
								<option value=@type.Id>@type.ModalityDescription</option>
							}
						</select>
					</div>
					<div class="row">
						<span asp-validation-for="@Model.StudentPreferenceAddVM.Preference.ModalityID" class="text-danger"></span>
					</div>

					<!-- Time of day -->
					<label asp-for="@Model.StudentPreferenceAddVM.Preference.TimeOfDayID">Time of Day</label>
					<div class="input-group flex-nowrap pb-2">
						@*						<span class="input-group-text bg-primary">
						<i class="bi bi-ticket-perforated text-white"></i>
						</span>*@
						<select asp-for="@Model.StudentPreferenceAddVM.Preference.TimeOfDayID" class="form-select" disabled>
							<option value="" disabled selected>--Select time--</option>
							@foreach (TimeOfDay type in Model.TimeOfTheDay)
							{
								<option value=@type.Id>@type.Time</option>
							}
							<option value="">N/A</option>
						</select>
					</div>
					<div class="row">
						<span asp-validation-for="@Model.StudentPreferenceAddVM.Preference.TimeOfDayID" class="text-danger"></span>
					</div>

					<!-- Campus -->
					<label asp-for="@Model.StudentPreferenceAddVM.Preference.CampusID">Campus</label>
					<div class="input-group flex-nowrap pb-2">
						@*						<span class="input-group-text bg-primary">
						<i class="bi bi-ticket-perforated text-white"></i>
						</span>*@
						<select asp-for="@Model.StudentPreferenceAddVM.Preference.CampusID" class="form-select" disabled>
							<option value="" disabled selected>--Select Campus--</option>
							@foreach (Campus type in Model.Campuses)
							{
								<option value=@type.Id>@type.CampusName</option>
							}
							<option value="">N/A</option>
						</select>
					</div>
					<div class="row">
						<span asp-validation-for="@Model.StudentPreferenceAddVM.Preference.CampusID" class="text-danger"></span>
					</div>

					<!-- Start of Submit buttons -->
					<div class="d-flex">
						@if (Model.StudentPreferenceAddVM.Preference.PreferenceDetailsID != 0)
						{
							<div class="">
								<button type="button" class="btn btn-danger shadow-sm" data-bs-toggle="modal" data-bs-target="#preferenceModal">
									<span>
										<i class="bi bi-trash text-white"></i>
									</span>
									Delete
								</button>
							</div>
						}

						<div class="ms-auto">
							<a asp-area="Instructor" asp-page="/Preferences/Index" asp-route-Semester="@Model.StudentPreferenceAddVM.Semester.Id" class="btn btn-secondary shadow-sm">Cancel</a>
							@if (Model.StudentPreferenceAddVM.Preference.PreferenceDetailsID != 0)
							{
								<input asp-page-handler="EditPreference" type="submit" class="btn btn-primary shadow-sm" value="Save" />
							}
							else
							{
								<input asp-page-handler="CreatePreference" type="submit" class="btn btn-primary shadow-sm" value="Save" />
							}
						</div>
					</div>
					<!-- End of Submit buttons -->
					<!-- Hidden inputs -->
					<input type="hidden" asp-for="@Model.StudentPreferenceAddVM.Preference.WNumber" />
					<input type="hidden" asp-for="@Model.StudentPreferenceAddVM.Course.CourseID" />
					<input type="hidden" asp-for="@Model.StudentPreferenceAddVM.Semester.Id" />
					<input type="hidden" asp-for="@Model.StudentPreferenceAddVM.Preference.PreferenceDetailsID" />
				</form>
			</div>
		</div>
	</div>
</div>

<!-- Start of modal-->
<div class="modal" id="preferenceModal" tabindex="-1">
	<div class="modal-dialog">
		<div class="modal-content">
			<div class="modal-header">
				<h5 class="modal-title">Delete Preference</h5>
				<button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
			</div>
			<div class="modal-body">
				<p>Are you sure you want to <b class="text-danger">delete</b> this preference for </p>
				<p><b>@Model.StudentPreferenceAddVM.Course.CourseNumber @Model.StudentPreferenceAddVM.Course.CourseName</b>?</p>
			</div>
			<div class="modal-footer">
				<button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
				<input asp-page-handler="DeletePreference" type="submit" form="selectPreference" class="btn btn-danger" value="Delete" />
			</div>
		</div>
	</div>
</div>

@section Scripts {
	<script>
		class Preferences {
			/**
			* See if requried. True = required
			* @@type {boolean}
			*/
			#Modality = true;
			#ModalityID = 'StudentPreferenceAddVM_Preference_ModalityID';
			#ModalityQuerySelector = '[data-valmsg-for="StudentPreferenceAddVM.Preference.ModalityID"]';

			/**
			 * See if requried. True = required
			 * @@type {boolean}
			 */
			#TimeOfDay = false;
			#TimeOfDayID = "StudentPreferenceAddVM_Preference_TimeOfDayID";
			#TimeOfDayQuerySelector = '[data-valmsg-for="StudentPreferenceAddVM.Preference.TimeOfDayID"]';

			/**
			* See if requried. True = required
			* @@type {boolean}
			*/
			#Campus = false;
			#CampusID = 'StudentPreferenceAddVM_Preference_CampusID';
			#CampusQuerySelector = '[data-valmsg-for="StudentPreferenceAddVM.Preference.CampusID"]';

			/**
			* Used to toggle if time of day is required for the modality
			* Also hides or displays the None option
			* @@param {boolean} if true then field is required
			*/
			requireTimeOfDay(toggle) {
				if (toggle) {
					this.#TimeOfDay = true;
				}
				else {
					this.#TimeOfDay = false;
				}
				this.#requirefield(this.#TimeOfDayID, this.#TimeOfDayQuerySelector, toggle);
			}

			/**
			* Used to toggle if campus is required for the modality
			* @@param {boolean} if true then field is required
			*/
			requireCampus(toggle) {
				if (toggle) {
					this.#Campus = true;
				}
				else {
					this.#Campus = false;
				}
				this.#requirefield(this.#CampusID, this.#CampusQuerySelector, toggle);
			}

			/**
			 * If the select field is requireds make it editable.
			 * If not disable the input and set it to empty
			 * @@param {string} Id The Id for the Input
			 * @@param {string} ErrorQuery The Query for the Error DOM element\
			 * @@param {boolean} toggle If we are making the param required
			*/
			#requirefield(Id, ErrorQuery, toggle) {
				let object = document.getElementById(Id);
				let NoneOption = object.options[object.options.length - 1];
				if (toggle) {
					if (object.value == '') {
						object.options.selectedIndex = 0;
					}
					object.disabled = false;
					NoneOption.style.display = 'none';
				}
				else {
					object.options.selectedIndex = object.options.length - 1;
					object.disabled = true;
					NoneOption.style.display = 'initial';
				}
				let span = $(ErrorQuery)[0];
				span.innerText = "";
			}

			/**
			 * @@param {string} Id The Id for the Input
			 * @@param {string} ErrorQuery The Query for the Error DOM element
			 * @@returns {boolean} Returns true if there is an error
			*/
			#validateRequirement(Id, ErrorQuery) {
				let object = document.getElementById(Id);
				let span = $(ErrorQuery)[0];

				if (object.value == "") {
					span.innerText = "Please select a value.";
					return true;
				}
				else {
					span.innerText = "";
				}
				return false;
			}

			/**
			 * Validate all the fields. If they are return true, and if not display error messages
			 * @@returns {boolean} returns true if valid
			 */
			validateFields() {
				let isValid = true;

				
				if (this.#validateRequirement(this.#ModalityID, this.#ModalityQuerySelector)) {
					isValid = false;
				}

				if (this.#TimeOfDay) {
					if (this.#validateRequirement(this.#TimeOfDayID, this.#TimeOfDayQuerySelector)) {
						isValid = false;
					}
				}
				if (this.#Campus) {
					if (this.#validateRequirement(this.#CampusID, this.#CampusQuerySelector)) {
						isValid = false;
					}
				}

				return isValid;
			}
		};
		// initulize the preferences right away
		let Preference = new Preferences();

		// StudentPreferenceAddVM_Preference_TimeOfDayID
		// StudentPreferenceAddVM_Preference_DayOfWeekID
		// StudentPreferenceAddVM_Preference_ModalityID
		// StudentPreferenceAddVM_Preference_CampusID
		// StudentPreferenceAddVM_Preference_PreferencesRank

		function changeRequirementsForModality() {
			let value = document.getElementById('StudentPreferenceAddVM_Preference_ModalityID').value;
			/*
			1	FTF	Face to Face
			2	ONL	Online
			3	VRT	Virtual
			4	HYB	Hybrid
			*/
			switch (Number(value)) {
				case 1:
					Preference.requireTimeOfDay(true);
					Preference.requireCampus(true);
					break;

				case 2:
					Preference.requireTimeOfDay(false);
					Preference.requireCampus(false);
					break;

				case 3:
					Preference.requireTimeOfDay(true);
					Preference.requireCampus(false);
					break;

				case 4:
					Preference.requireTimeOfDay(true);
					Preference.requireCampus(true);
					break;
				default:
					break;
			}
		}
		// Check the preferences on window load
		$(document).ready(function () {
			changeRequirementsForModality();
		});


		function validateForm() {
			let isValid = true;

			if (!Preference.validateFields()) {
				isValid = false;
			}

			return isValid;
		}
	</script>

}

